import net.minecraftforge.gradle.common.tasks.SignJar
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5+'
        classpath 'org.spongepowered:mixingradle:0.7+'
        classpath 'org.codehaus.groovy:groovy-all:3.0.8'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '4.0.4'
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

repositories {
    maven {
        name = "SpongeMaven"
        url = 'https://repo.spongepowered.org/maven'
    }
    maven {
        name = "satyrn.dev"
        url = 'https://satyrn.dev/maven/'
    }
    maven {
        name = "CurseMaven"
        url = 'https://cursemaven.com/'
        content {
            includeGroup "curse.maven"
        }
    }
    mavenCentral()
}

def config = null
file "${projectDir.getAbsolutePath()}/config.json" withReader {
    config = new JsonSlurper().parseText(it.text)
}

def shortVersion = "${config.version.major}.${config.version.minor}.${config.version.patch}"

version = "${config.minecraft}-${shortVersion}"
group = 'dev.satyrn.wolfarmor'
archivesBaseName = 'WolfArmorAndStorage'

println "Current version is ${version}"

if (project.hasProperty('channel')) {
    version = version + "+${project.getProperties()['channel']}"
} else {
    version = version + "-universal"
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

dependencies {
    minecraft group: 'net.minecraftforge', name: 'forge', version: "${config.minecraft}-${config.forge}"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation (group: 'org.spongepowered', name: 'mixin', version: '0.7+') {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
    }

    compileOnly fg.deobf("curse.maven:letsleepingdogslie-334098:2803490")
    compileOnly fg.deobf("curse.maven:sophisticatedwolves-220495:2713186")
    compileOnly fg.deobf("curse.maven:electroblobswizardry-265642:3189062")
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: 'snapshot', version: '20171003-1.12'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    runs {
        client {
            workingDirectory file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'fml.coreMods.load', 'dev.satyrn.wolfarmor.core.WolfArmorCore'
            property 'mixin.debug', 'true'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            if (project.hasProperty('minecraft.username')) {
                arg "--username=${project.getProperties()['minecraft.username']}"
                if (project.hasProperty('minecraft.password')) {
                    arg "--password=${project.getProperties()['minecraft.password']}"
                }
            }
        }

        server {
            workingDirectory file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'fml.coreMods.load', 'dev.satyrn.wolfarmor.core.WolfArmorCore'
            property 'mixin.debug', 'true'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

        }
    }
}

sourceSets { main { output.resourcesDir = output.classesDirs[0] }}

task cleanGeneratedSource(type: Delete) {
    delete "$buildDir/generated"
}

task generateSource(type: Copy) {
    dependsOn cleanGeneratedSource
    from sourceSets.main.java
    into "$buildDir/generated/sources/main/java"
    filesMatching('**/*.java') {
        expand version: shortVersion, mcversion: config.minecraft,
                modname: config.name, modid: config.modid,
                apiVersion: config.api
    }
}

clean {
    dependsOn cleanGeneratedSource
}

compileJava {
    dependsOn generateSource
    source = project.fileTree("$buildDir/generated/sources/main/java")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            'Built-By': System.properties['user.name'],
            'Created-By': "${System.properties['java.vm.version']} (${System.properties['java.vm.vendor']})",
            'Implementation-Title': project.name,
            'Implementation-Version': shortVersion,
            'Implementation-Vendor': 'https://satyrn.dev',
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'API-Version': config.api,
            'FMLCorePlugin': "${project.group}.core.WolfArmorCore",
            'ForceLoadAsMod': true,
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'TweakOrder': 0,
            'MixinConfigs': 'mixins.wolfarmor.core.json'
        ])
    }
}

task signJar(type: SignJar, dependsOn: 'reobfJar') {
    onlyIf {
        project.hasProperty('keyStore')
        project.hasProperty('keyStoreAlias')
        project.hasProperty('keyStorePass')
        project.hasProperty('keyStoreKeyPass')
    }
    keyStore = project.getProperties()['keyStore']
    alias = project.getProperties()['keyStoreAlias']
    storePass = project.getProperties()['keyStorePass']
    keyPass = project.getProperties()['keyStoreKeyPass']
    inputFile = jar.outputs.files[0]
    outputFile = file("$buildDir/libs/$archivesBaseName-$version-signed.jar")
}

build {
    dependsOn signJar
}

processResources {
    inputs.property 'version', project.version
    inputs.property 'mcversion', '1.12.2'

    duplicatesStrategy = DuplicatesStrategy.WARN

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        // replace version and mcversion
        expand version: shortVersion, mcversion: '1.12.2', modname: config.name, modid: config.modid
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    // copy LICENSE
    from('/') {
        include 'LICENSE'
        include 'CREDITS'
        include 'THIRDPARTY'
    }
}

mixin {
    add sourceSets.main, "mixins.wolfarmor.refmap.json"
}


// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')


task saveConfig {
    doLast {
        def configFile = new File("${projectDir.getAbsolutePath()}/config.json")
        configFile.delete()
        configFile.write(new JsonBuilder(config).toPrettyString())
    }
}

def VERSIONING_GROUP = 'Versioning'
def SCM_GROUP = 'Source Control'

task versionPatch {
    group VERSIONING_GROUP
    dependsOn 'gitCheckWorkingTree'
    finalizedBy 'saveConfig'
    finalizedBy 'gitAddConfig'
    finalizedBy 'gitTagVersion'
    finalizedBy 'gitCommit'
    finalizedBy 'reportVersionChange'

    doLast {
        println projectDir.getAbsolutePath()
        if (gitCheckWorkingTree.output() != "") {
            saveConfig.enabled = false
            gitAddConfig.enabled = false
            gitTagVersion.enabled = false
            gitCommit.enabled = false
            throw new Error("Working directory not clean!")
        } else {
            config.version.patch += 1
        }
    }
}

task versionMinor {
    group VERSIONING_GROUP
    dependsOn 'gitCheckWorkingTree'
    finalizedBy 'saveConfig'
    finalizedBy 'gitAddConfig'
    finalizedBy 'gitTagVersion'
    finalizedBy 'gitCommit'
    finalizedBy 'reportVersionChange'

    doLast {
        println projectDir.getAbsolutePath()
        if (gitCheckWorkingTree.output() != "") {
            saveConfig.enabled = false
            gitAddConfig.enabled = false
            gitTagVersion.enabled = false
            gitCommit.enabled = false
            throw new Error("Working directory not clean!")
        } else {
            config.version.patch = 0
            config.version.minor += 1
        }
    }
}

task versionMajor {
    group VERSIONING_GROUP
    dependsOn 'gitCheckWorkingTree'
    finalizedBy 'saveConfig'
    finalizedBy 'gitAddConfig'
    finalizedBy 'gitTagVersion'
    finalizedBy 'gitCommit'
    finalizedBy 'reportVersionChange'

    doLast {
        println projectDir.getAbsolutePath()
        if (gitCheckWorkingTree.output() != "") {
            saveConfig.enabled = false
            gitAddConfig.enabled = false
            gitTagVersion.enabled = false
            gitCommit.enabled = false
            throw new Error("Working directory not clean!")
        } else {
            config.version.patch = 0
            config.version.minor = 0
            config.version.major += 1
        }
    }
}

task gitCheckWorkingTree(type:Exec) {
    group SCM_GROUP
    workingDir projectDir.getAbsolutePath()
    executable 'git'
    args '--no-pager', 'diff', 'HEAD'
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
}

task gitAddConfig() {
    group SCM_GROUP
    shouldRunAfter saveConfig
    doLast {
        exec {
            workingDir projectDir.getAbsolutePath()
            ignoreExitValue true
            executable 'git'
            args 'add', 'config.json'
        }
    }
}

task gitCommit() {
    group SCM_GROUP
    shouldRunAfter gitAddConfig
    doLast {
        exec {
            workingDir projectDir.getAbsolutePath()
            def newVersionNum = "v${config.version.major}.${config.version.minor}.${config.version.patch}"
            if (project.hasProperty('channel')) {
                newVersionNum = newVersionNum + "+${project.getProperties()['channel']}"
            }
            ignoreExitValue true
            executable 'git'
            if (project.hasProperty('signing.password')) {
                args 'commit', '-S', '-m', "\"🏷 ${newVersionNum}\""
            } else {
                args 'commit', '-m', "\"🏷 ${newVersionNum}\""
            }
        }
    }
}

task gitTagVersion() {
    group SCM_GROUP
    shouldRunAfter gitCommit
    doLast {
        exec {
            workingDir projectDir.getAbsolutePath()
            def newVersionNum = "v${config.version.major}.${config.version.minor}.${config.version.patch}"
            if (project.hasProperty('channel')) {
                newVersionNum = newVersionNum + "+${project.getProperties()['channel']}"
            }
            ignoreExitValue true
            executable 'git'
            if (project.hasProperty('signing.password')) {
                args 'tag', '-s', "${newVersionNum}", '-m', "\"${newVersionNum}\""
            } else {
                args 'tag', '-a', "${newVersionNum}", '-m', "\"${newVersionNum}\""
            }
        }
        exec {
            workingDir projectDir.getAbsolutePath()
            ignoreExitValue true
            executable 'git'
            args 'push', 'origin', '--tags'
        }
    }
}

task reportVersionChange {
    group VERSIONING_GROUP
    shouldRunAfter gitCommit
    doLast {
        println "Current semver: ${config.version.major}.${config.version.minor}.${config.version.patch}"
    }
}
